# MapDart 프로젝트 - Cursor AI 어시스턴트 규칙

## 프로젝트 컨텍스트
- **프로젝트명**: MapDart
- **기술 스택**: Next.js 15, React 19, TypeScript, Tailwind CSS
- **아키텍처**: App Router 사용
- **스타일링**: Tailwind CSS 중심

## 코딩 규칙

### TypeScript
- 모든 파일에서 엄격한 타입 검사 적용
- `any` 타입 사용 금지, 적절한 타입 정의 필수
- 인터페이스와 타입 정의는 별도 파일로 분리 (types/ 디렉토리)
- 함수와 컴포넌트는 반환 타입을 명시적으로 지정

### React & Next.js
- 함수형 컴포넌트만 사용 (클래스형 컴포넌트 금지)
- React Hooks 최신 패턴 적용
- App Router 구조 유지 (pages/ 대신 app/ 사용)
- Server Components와 Client Components 구분하여 사용
- 'use client'를 필요한 경우에만 추가
- 컴포넌트 파일명은 PascalCase 사용

### 스타일링
- Tailwind CSS 우선 사용
- 커스텀 CSS는 필요한 경우에만 사용
- 반응형 디자인 필수 적용 (mobile-first)
- 다크모드 지원 고려

### 파일 구조
```
src/
  app/              # Next.js App Router
    page.tsx        # 페이지 컴포넌트
    layout.tsx      # 레이아웃 컴포넌트
    loading.tsx     # 로딩 UI
    error.tsx       # 에러 UI
  components/       # 재사용 가능한 컴포넌트
  hooks/            # 커스텀 훅
  lib/              # 유틸리티 함수
  types/            # TypeScript 타입 정의
  styles/           # 전역 스타일
```

### 네이밍 컨벤션
- 파일명: kebab-case (컴포넌트는 PascalCase)
- 변수/함수명: camelCase
- 상수: UPPER_SNAKE_CASE
- 컴포넌트: PascalCase
- 타입/인터페이스: PascalCase (Interface 접두사 사용 금지)

### 성능 최적화
- React.memo, useMemo, useCallback 적절히 활용
- 동적 import 사용으로 코드 스플리팅 적용
- Next.js Image 컴포넌트 사용
- 불필요한 리렌더링 방지

### 코드 품질
- ESLint 규칙 준수
- 함수는 단일 책임 원칙 적용
- 최대 함수 길이: 20줄 이내
- 중복 코드 제거 및 재사용성 고려
- 주석은 왜(why)에 대해서만 작성

### 에러 처리
- try-catch 블록으로 에러 처리
- 사용자 친화적인 에러 메시지 제공
- Error Boundary 활용

### 접근성
- 시맨틱 HTML 사용
- ARIA 속성 적절히 활용
- 키보드 네비게이션 지원
- 스크린 리더 호환성 고려

## AI 어시스턴트 지침

1. **코드 생성 시**: 위의 모든 규칙을 준수하여 코드 생성
2. **리팩토링 시**: 기존 코드 스타일과 일관성 유지
3. **새 기능 추가 시**: 기존 아키텍처 패턴 따르기
4. **버그 수정 시**: 근본 원인 파악 후 수정
5. **질문 답변 시**: 프로젝트 컨텍스트를 고려한 답변 제공

## 우선순위
1. 타입 안전성
2. 성능 최적화
3. 코드 가독성
4. 재사용성
5. 접근성

---

이 규칙들을 따라 일관되고 품질 높은 코드를 작성해주세요. 